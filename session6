ex1: memory leakage or memmory padding

typedef struct sampStruc
{
  unsigned int intvalue1;
  unsigned short shvalue;
  unsigned char chvalue;
  unsigned int intvalue2;
  unsigned int intvalue3;
}sampStruc_t;
main()
{
  sampStruc_t strcval;
  sampStruc_t *strptr;
  printf("\nsize of structure variable=%d",sizeof(strcval));
  printf("\nsize of structure variable=%d",sizeof(sampStruc_t));
  printf("\nsize of structure variable=%d",sizeof(*strptr));
  printf("\nAddress of structure variable=%u",&strcval);
  printf("\nAddress of structure field intvalue1=%u ",&strcval.intvalue1);
  printf("\nAddress of structure field shvalue=%u",&strcval.shvalue);
  printf("\nAddress of structure field intvalue2=%u",&strcval.intvalue2);
  printf("\nAddress of structure field chvalue=%x",&strcval.chvalue);
  printf("\nAddress of structure field intvalue3=%x",&strcval.intvalue3);
}

ex2:-

typedef struct sampStruc
{
  unsigned int intvalue1;
  unsigned short shvalue;
  unsigned int intvalue2;
  unsigned char chvalue;
  unsigned int intvalue3;
}sampStruc_t;
main()
{
  int i;
  sampStruc_t strcval;
  strcval.intvalue1=0x1234;
  strcval.shvalue=0x56;
  strcval.intvalue2=0x789a;
  strcval.chvalue=0xbc;
  strcval.intvalue3=0xfedcba98;
  unsigned char *ptr;
/*  printf("\n intvalue1=%x ",strcval.intvalue1);
  printf("\n shvalue=%x",strcval.shvalue);
  printf("\n intvalue2=%x",strcval.intvalue2);
  printf("\n chvalue=%x",strcval.chvalue);
  printf("\n intvalue3=%x",strcval.intvalue3);*/
  ptr=(unsigned char *)&strcval;
  for(i=0;i<20;i++)
  {
    printf("%x ",*(ptr+i));
  }
}


ex3 :-

typedef struct sampStruc
{
  unsigned int intvalue1;
  unsigned short shvalue;
  unsigned int intvalue2;
  unsigned char chvalue;
  unsigned int intvalue3;
}sampStruc_t;

printfield(sampStruc_t *strcptr)
{
  printf("intvalue1=%x\n",strcptr->intvalue1);
  printf("shvalue=%x\n",strcptr->shvalue);
  printf("intvalue2=%x\n",strcptr->intvalue2);
  printf("chvalue=%x\n",strcptr->chvalue);
  printf("intvalue3=%x\n",strcptr->intvalue3);
}

main()
{
  int i;
  sampStruc_t strcval;
  strcval.intvalue1=0x1234;
  strcval.shvalue=0x56;
  strcval.intvalue2=0x789a;
  strcval.chvalue=0xbc;
  strcval.intvalue3=0xfedcba98;
  printfield(&strcval);
  //unsigned char *ptr;
/*  printf("\n intvalue1=%x ",strcval.intvalue1);
  printf("\n shvalue=%x",strcval.shvalue);
  printf("\n intvalue2=%x",strcval.intvalue2);
  printf("\n chvalue=%x",strcval.chvalue);
  printf("\n intvalue3=%x",strcval.intvalue3);*/
  //ptr=(unsigned char *)&strcval;
/*  for(i=0;i<20;i++)
  {
    printf("%x ",*(ptr+i));
  }*/
}

ex4:-

typedef struct sampStruc
{
  unsigned int intvalue1;
  unsigned short shvalue;
  unsigned int intvalue2;
  unsigned char chvalue;
  unsigned int intvalue3;
}sampStruc_t;

printfield(sampStruc_t *strcptr)
{
  printf("intvalue1=%x\n",strcptr->intvalue1);
  printf("shvalue=%x\n",strcptr->shvalue);
  printf("intvalue2=%x\n",strcptr->intvalue2);
  printf("chvalue=%x\n",strcptr->chvalue);
  printf("intvalue3=%x\n",strcptr->intvalue3);
}

main()
{
  sampStruc_t *strcptr;
  strcptr=(sampStruc_t *)malloc(sizeof(sampStruc_t));
  printf("\nEnter intvalue1=");
  scanf("%x",&strcptr->intvalue1);
  printf("\nEnter shvalue=");
  scanf("%x",&strcptr->shvalue);
  printf("\nEnter intvalue2=");
  scanf("%x",&strcptr->intvalue2);
  printf("\nEnter intvalue3=");
  scanf("%x",&strcptr->intvalue3);
  printf("\nEnter chvalue=");
  scanf("%x",&strcptr->chvalue);
  printfield(strcptr);
  /*  strcval.intvalue1=0x1234;
  strcval.shvalue=0x56;
  strcval.intvalue2=0x789a;
  strcval.chvalue=0xbc;
  strcval.intvalue3=0xfedcba98;
  printfield(&strcval);*/
}

ex5:-

typedef struct sampStruc
{
  unsigned int intvalue1;
  unsigned short shvalue;
  unsigned int intvalue2;
  unsigned char chvalue;
  unsigned int intvalue3;
}sampStruc_t;

getStruct(sampStruc_t *strcptr)
{

//strcptr=(sampStruc_t *)malloc(sizeof(sampStruc_t));
  printf("\nEnter intvalue1=");
  scanf("%x",&strcptr->intvalue1);
  printf("\nEnter shvalue=");
  scanf("%x",&strcptr->shvalue);
  printf("\nEnter intvalue2=");
  scanf("%x",&strcptr->intvalue2);
  printf("\nEnter intvalue3=");
  scanf("%x",&strcptr->intvalue3);
  printf("\nEnter chvalue=");
  scanf("%x",&strcptr->chvalue);
}
DispStructWithPtr(sampStruc_t *strcptr)
{
  printf("intvalue1=%x\n",strcptr->intvalue1);
  printf("shvalue=%x\n",strcptr->shvalue);
  printf("intvalue2=%x\n",strcptr->intvalue2);
  printf("chvalue=%x\n",strcptr->chvalue);
  printf("intvalue3=%x\n",strcptr->intvalue3);
}
DispStruct(sampStruc_t strcptr)
{
  printf("intvalue1=%x\n",strcptr.intvalue1);
  printf("shvalue=%x\n",strcptr.shvalue);
  printf("intvalue2=%x\n",strcptr.intvalue2);
  printf("chvalue=%x\n",strcptr.chvalue);
  printf("intvalue3=%x\n",strcptr.intvalue3);
}
main()
{
  sampStruc_t st;

  getStruct(&st);
  DispStruct(st);
  DispStructWithPtr(&st);
  
}



ex6:-

typedef union sampUnion_s
{
  unsigned char carray[4];
  unsigned short shortvalue;
  unsigned char charvalue; 
  unsigned int intvalue3;
}sampUnion_t;

main()
{
  sampUnion_t unval;
  printf("size of union variable=%d\n",sizeof(unval));
  printf("Address or variable=%u\n",&unval);
  printf("Address of field carray[4]=%u\n",unval.carray);
  printf("Address of field shortvalue=%u\n",&unval.shortvalue);
  printf("Address of field charvalue=%u\n",&unval.charvalue);
  printf("Address of field intvalue3=%u\n",&unval.intvalue3);
}


ex7of1:-
typedef union sampUnion_s
{
  unsigned char carray[4];
  unsigned short shortvalue;
  unsigned char charvalue; 
  unsigned int intvalue3;
}sampUnion_t;

main()
{
  sampUnion_t unval;
  unval.carray[0]=0x12;
  unval.carray[1]=0x34;
  unval.carray[2]=0x56;
  unval.carray[3]=0x78;

  //  printf("size of union variable=%d\n",sizeof(unval));
  //printf("Address or variable=%u\n",&unval);
  //printf("value of field carray[4]=%x\n",unval.carray);
  printf("value of field intvalue3=%x\n",unval.intvalue3);
  printf("value of field shortvalue=%x\n",unval.shortvalue);
  printf("value of field charvalue=%x\n",unval.charvalue);

}

ex7of2:-

typedef union sampUnion_s
{
  unsigned char carray[4];
  unsigned short shortvalue;
  unsigned char charvalue; 
  unsigned int intvalue3;
}sampUnion_t;

main()
{
  sampUnion_t unval;
  unval.carray[0]=12;
  unval.carray[1]=34;
  unval.carray[2]=56;
  unval.carray[3]=78;

  //  printf("size of union variable=%d\n",sizeof(unval));
  //printf("Address or variable=%u\n",&unval);
  //printf("value of field carray[4]=%x\n",unval.carray);
  printf("value of field intvalue3=%d\n",unval.intvalue3);
  printf("value of field shortvalue=%d\n",unval.shortvalue);
  printf("value of field charvalue=%d\n",unval.charvalue);

}

ex8:-

typedef struct
{
  int bookId;
  char title[20];
  char author[20];
}bookInfo_t;

typedef struct
{
  int studentId;
  char name[20];
  int phone;
}studentInfo_t;

typedef struct
{
  int studentId;
  int bookId;
  int day;
  int month;
  int year;
}tranInfo_t;

typedef union
{
  bookInfo_t book;
  studentInfo_t student;
  tranInfo_t transac;
}recUnion_t;

main()
{ 
  int ch;
  recUnion_t unival;
  
  printf("\n1.Book Information");
  printf("\n2.Student Information");
  printf("\n3.Transaction Information");
  printf("\nEnter Choice:");
  scanf("%d",&ch);
  
  displayRecord(ch,&unival);

}

displayRecord(int recordType,recUnion_t *pRecord)
{
    switch(recordType)
    {
      case 1:
          printf("\nEnter book Id=");
          scanf("%d",&pRecord->book.bookId);  
          printf("\nEnter title=");
          scanf("%s",pRecord->book.title);  
          printf("\nEnter author=");
          scanf("%s",pRecord->book.author);

          printf("\nBook Information:");
          printf("\nBook Id   =%d",pRecord->book.bookId);  
          printf("\nAuthor    =%s",pRecord->book.author);  
          printf("\nBook Title=%s\n",pRecord->book.title);  
          break;  
     case 2:
          printf("\nEnter Student Id=");
          scanf("%d",&pRecord->student.studentId);  
          printf("\nEnter Name=");
          scanf("%s",pRecord->student.name);  
          printf("\nEnter phone=");
          scanf("%d",&pRecord->student.phone);

          printf("\nStudent Information:");
          printf("\nStudent Id=%d",pRecord->student.studentId);  
          printf("\nName      =%s",pRecord->student.name);  
          printf("\nPhone     =%d\n",pRecord->student.phone); 
          break;   
     case 3:
          printf("\nEnter Student Id=");
          scanf("%d",&pRecord->transac.studentId);  
          printf("Enter Book Id=");
          scanf("%d",&pRecord->transac.bookId);  
          printf("Enter Day=");
          scanf("%d",&pRecord->transac.day);
          printf("Enter month=");
          scanf("%d",&pRecord->transac.month);   
          printf("Enter year=");
          scanf("%d",&pRecord->transac.year);   

          printf("\nTransaction Information:");
          printf("\nStudent Id    =%d",pRecord->transac.studentId);  
          printf("\nBook Id       =%d",pRecord->transac.bookId);  
          printf("\nDay/Month/Year=%d/%d/%d\n",pRecord->transac.day,                         pRecord->transac.month,pRecord->transac.year); 
          break;
    }
      
}                 



