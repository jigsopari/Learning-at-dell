stack.H:->

#define STACK_FULL_ERROR 1
#define STACK_EMPTY_ERROR 1
#define SUCCESS 0
#define MAX_STACK_SIZE 10
typedef struct
{
  int empNo;
  int salary;
}element_t;
typedef struct 
{
  int top;
  int noOfElements;
  element_t sBuf[MAX_STACK_SIZE];
}stack_t;
stack_t strval;

ex1.c:->
#include <stdio.h>
#include "stack.h"
main()
{
  int ch,ret;
  strval.top=-1;
  element_t *p;
  while(1)
  {
     printf("1.push Element to stack");
     printf("2.pop Element from stack");
     printf("3.Display all elements in the stack");
     printf("4.Exit");
     printf("Enter choice:");
     scanf("%d",&ch);
     switch(ch)
     {
        case 1:
             p=(element_t *)malloc(sizeof(element_t));
             ret=pushElementToStack(p);
             printf("\n%d\n",ret);
             break;
       case 2:
             p=(element_t *)malloc(sizeof(element_t));
             popElementFromStack(p);    
             break;
       case 3:
             displayStack();
             break;
       case 4:
            exit(1);
    }
  }
}       

arstk.c:->
#include <stdio.h>
#include "stack.h"
int pushElementToStack(element_t *pElm)
{  
   printf("Enter Employee No:");
   scanf("%d",&pElm->empNo);
   printf("Enter salary:");
   scanf("%d",&pElm->salary);
   if(strval.noOfElements==MAX_STACK_SIZE)
      return STACK_FULL_ERROR;
   else
   {
       strval.sBuf[++strval.top]=*pElm;
       strval.noOfElements++;
       printf("\nsuccess=");
       return SUCCESS;
    }
}

int popElementFromStack(element_t *pElm)
{
  if(strval.noOfElements==0)
    return STACK_EMPTY_ERROR;
  else
   {
    *pElm=strval.sBuf[strval.top];
    
    printf("Employee No:%d   ",pElm->empNo);
    printf("salary:%d\n",pElm->salary);
    strval.top--;
    strval.noOfElements--;
    }
    return SUCCESS;
}

void displayStack()
{
   int i,j=0;
   for(i=0;i<strval.noOfElements;i++)
    {
       printf("Employee No:%d   ",strval.sBuf[i].empNo);
       printf("salary:%d\n",strval.sBuf[i].salary);
    }
}

makefile1:->

target: ex1.o arstk.o
	cc -o target ex1.o arstk.o
ex1.o: ex1.c
	cc -c ex1.c
arstk.o: arstk.c
	cc -c arstk.c
clean:
	rm *.o    
  
  llstack.H->
  
  typedef struct element
{
  int empNo;
  int salary;
  struct element *pNext;
}element_t;
element_t *pHead;
int noOfElements;


llstack.c:->
#include <stdio.h>
#include "llstack.h"
main()
{
  int ch,ret;
  //strval.top=-1;
  element_t *p;
  while(1)
  {
     printf("1.push Element to stack");
     printf("2.pop Element from stack");
     printf("3.Display all elements in the stack");
     printf("4.Exit");
     printf("Enter choice:");
     scanf("%d",&ch);
     switch(ch)
     {
        case 1:
             p=(element_t *)malloc(sizeof(element_t));
             ret=pushElementToStack(p);
             printf("\n%d\n",ret);
             break;
       case 2:
             p=(element_t *)malloc(sizeof(element_t));
             popElementFromStack(p);    
             break;
       case 3:
             displayStack();
             break;
       case 4:
            exit(1);
    }
  }
}       


makefile:->
target: ex1.o llstk.o
	cc -o target ex1.o llstk.o
ex1.o: ex1.c
	cc -c ex1.c
llstk.o: llstk.c
	cc -c llstk.c
clean:
	rm *.o





